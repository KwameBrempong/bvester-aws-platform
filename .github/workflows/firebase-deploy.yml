name: 🚀 Deploy Bvester to Firebase Hosting

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force immediate deployment'
        required: false
        default: 'false'
        type: boolean
      cache_bust:
        description: 'Force cache invalidation'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '18'
  PROJECT_ID: 'bizinvest-hub-prod'

jobs:
  build-and-deploy:
    name: Build and Deploy to Firebase
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm ls # Verify installation
    
    - name: 🔐 Create Environment Configuration
      env:
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_WEB_API_KEY }}
        FIREBASE_PROJECT_ID: ${{ env.PROJECT_ID }}
      run: |
        cat > .env.production << EOF
        # Firebase Configuration
        EXPO_PUBLIC_FIREBASE_API_KEY=$FIREBASE_API_KEY
        EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=$FIREBASE_PROJECT_ID.firebaseapp.com
        EXPO_PUBLIC_FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID
        EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET=$FIREBASE_PROJECT_ID.appspot.com
        EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_SENDER_ID }}
        EXPO_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        
        # Environment Configuration
        EXPO_PUBLIC_ENVIRONMENT=production
        EXPO_PUBLIC_API_URL=https://api.bvester.com
        EXPO_PUBLIC_USE_FIREBASE_EMULATOR=false
        
        # Feature Flags
        EXPO_PUBLIC_ENABLE_ANALYTICS=true
        EXPO_PUBLIC_ENABLE_CRASH_REPORTING=true
        EXPO_PUBLIC_ENABLE_DEBUG_LOGS=false
        EOF
        
        # Also create .env for build process
        cp .env.production .env
    
    - name: 🏗️ Prepare Web Application
      run: |
        echo "Preparing BVester revolutionary web application..."
        
        # Our revolutionary platform uses static files in web-app directory
        # Firebase is configured to serve from web-app directory
        if [ -d "web-app" ]; then
          echo "✅ Revolutionary web application found in web-app directory"
          ls -la web-app/
          
          # Verify key files are present
          if [ -f "web-app/index.html" ]; then
            echo "✅ Revolutionary homepage (index.html) found"
            head -5 web-app/index.html
          fi
          
          if [ -f "web-app/css/revolutionary.css" ]; then
            echo "✅ Revolutionary CSS found"
          fi
          
          if [ -f "web-app/js/revolutionary.js" ]; then
            echo "✅ Revolutionary JavaScript found"
          fi
          
        else
          echo "❌ web-app directory not found"
          exit 1
        fi
    
    - name: 🔥 Deploy to Firebase Hosting
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BIZINVEST_HUB_PROD }}
      run: |
        if [ -z "$FIREBASE_SERVICE_ACCOUNT" ]; then
          echo "❌ Firebase service account not found. Using alternative deployment method..."
          echo "🔧 Installing Firebase CLI..."
          npm install -g firebase-tools
          
          echo "🚀 Deploying directly to Firebase..."
          echo "${{ secrets.FIREBASE_WEB_API_KEY }}" > firebase-key.json
          
          # Deploy using Firebase token if available
          if [ ! -z "${{ secrets.FIREBASE_TOKEN }}" ]; then
            firebase deploy --only hosting:bvester-com --project ${{ env.PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"
          else
            echo "❌ No Firebase token available. Manual deployment required."
            echo "✅ Files are ready in web-app directory for manual deployment"
          fi
        else
          echo "✅ Using Firebase service account for deployment..."
          echo "$FIREBASE_SERVICE_ACCOUNT" > service-account-key.json
          
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Authenticate with service account
          export GOOGLE_APPLICATION_CREDENTIALS="service-account-key.json"
          
          # Deploy with service account
          firebase deploy --only hosting:bvester-com --project ${{ env.PROJECT_ID }}
        fi
    
    - name: 🔄 Force CDN Cache Invalidation
      run: |
        echo "🔄 Forcing CDN cache invalidation..."
        
        # Generate unique cache-buster
        TIMESTAMP=$(date +%s)
        CACHE_BUSTER="DEPLOY-$TIMESTAMP"
        
        # Make requests to force cache refresh
        echo "🌍 Pinging bvester.com to force cache refresh..."
        curl -H "Cache-Control: no-cache" -H "Pragma: no-cache" "https://bvester.com?cb=$TIMESTAMP" >/dev/null 2>&1 || true
        curl -H "Cache-Control: no-cache" -H "Pragma: no-cache" "https://bvester-com.web.app?cb=$TIMESTAMP" >/dev/null 2>&1 || true
        
        # Wait a moment then validate deployment
        sleep 10
        
        echo "✅ Cache invalidation requests sent"
    
    - name: 🧪 Validate Deployment
      run: |
        echo "🧪 Validating deployment..."
        
        # Test primary domain
        if curl -f -s "https://bvester.com" | grep -q "Investment Magnet"; then
          echo "✅ Primary domain (bvester.com) - Revolutionary homepage detected!"
        else
          echo "❌ Primary domain (bvester.com) - Revolutionary homepage not detected"
        fi
        
        # Test backup domain  
        if curl -f -s "https://bvester-com.web.app" | grep -q "Investment Magnet"; then
          echo "✅ Backup domain (bvester-com.web.app) - Revolutionary homepage detected!"
        else
          echo "❌ Backup domain (bvester-com.web.app) - Revolutionary homepage not detected"
        fi
        
        echo "🔍 If revolutionary homepage not detected, CDN cache may need more time to clear"
    
    - name: ✅ Deployment Summary
      run: |
        echo "🎉 Bvester Production deployed successfully!"
        echo "🌍 Live at: https://bvester.com"
        echo "🌍 Backup at: https://bvester-com.web.app"
        echo "📊 Project: ${{ env.PROJECT_ID }}"
        echo "🔧 Environment: Production"
        echo "⏰ Deployed at: $(date -u)"
        echo "🚀 Revolutionary LinkedIn + Mint + AngelList platform is LIVE!"