# ðŸš€ BVESTER PLATFORM - DOCKER COMPOSE CONFIGURATION
# Complete containerized deployment for BVester African SME Investment Platform

version: '3.8'

services:
  # ============================================================================
  # BACKEND API SERVICE
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bvester-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - FLUTTERWAVE_SECRET_KEY=${FLUTTERWAVE_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    networks:
      - bvester-network
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - redis
    labels:
      - "com.bvester.service=backend-api"
      - "com.bvester.environment=production"

  # ============================================================================
  # WEB APPLICATION SERVICE
  # ============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: bvester-web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    networks:
      - bvester-network
    volumes:
      - web-logs:/var/log/nginx
      - web-cache:/var/cache/nginx
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates if available
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - backend
    labels:
      - "com.bvester.service=web-app"
      - "com.bvester.environment=production"

  # ============================================================================
  # REDIS CACHE SERVICE
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: bvester-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-bvestersecure}
    networks:
      - bvester-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.bvester.service=redis-cache"
      - "com.bvester.environment=production"

  # ============================================================================
  # NGINX REVERSE PROXY (Optional - for production with SSL)
  # ============================================================================
  proxy:
    image: nginx:alpine
    container_name: bvester-proxy
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - proxy-logs:/var/log/nginx
    networks:
      - bvester-network
    depends_on:
      - web
      - backend
    profiles:
      - production
    labels:
      - "com.bvester.service=reverse-proxy"
      - "com.bvester.environment=production"

  # ============================================================================
  # MONITORING SERVICE (Optional)
  # ============================================================================
  monitoring:
    image: prom/node-exporter:latest
    container_name: bvester-monitoring
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - bvester-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    profiles:
      - monitoring
    labels:
      - "com.bvester.service=monitoring"
      - "com.bvester.environment=production"

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  bvester-network:
    driver: bridge
    labels:
      - "com.bvester.network=main"

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  backend-logs:
    driver: local
    labels:
      - "com.bvester.volume=backend-logs"
  
  backend-uploads:
    driver: local
    labels:
      - "com.bvester.volume=backend-uploads"
  
  web-logs:
    driver: local
    labels:
      - "com.bvester.volume=web-logs"
  
  web-cache:
    driver: local
    labels:
      - "com.bvester.volume=web-cache"
  
  redis-data:
    driver: local
    labels:
      - "com.bvester.volume=redis-data"
  
  proxy-logs:
    driver: local
    labels:
      - "com.bvester.volume=proxy-logs"